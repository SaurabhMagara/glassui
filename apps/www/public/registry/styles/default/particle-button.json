{
  "name": "particle-button",
  "dependencies": [
    "shadcn"
  ],
  "files": [
    {
      "name": "particle-button.tsx",
      "content": "'use client'\r\n\r\nimport React, { useRef, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\ninterface Particle {\r\n  x: number;\r\n  y: number;\r\n  vx: number;\r\n  vy: number;\r\n  radius: number;\r\n  color: string;\r\n}\r\n\r\ninterface ParticleButtonProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  particleCount?: number;\r\n  particleColors?: string[];\r\n}\r\n\r\nconst ParticleButton: React.FC<ParticleButtonProps> = ({\r\n  children,\r\n  className = '',\r\n  particleCount = 50,\r\n  particleColors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8'],\r\n}) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const particlesRef = useRef<Particle[]>([]);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    if (!canvas) return;\r\n\r\n    const ctx = canvas.getContext('2d');\r\n    if (!ctx) return;\r\n\r\n    const createParticles = () => {\r\n      const particles: Particle[] = [];\r\n      for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          vx: (Math.random() - 0.5) * 0.2, // Consistent low velocity\r\n          vy: (Math.random() - 0.5) * 0.2, // Consistent low velocity\r\n          radius: Math.random() * 1.5 + 0.5,\r\n          color: particleColors[Math.floor(Math.random() * particleColors.length)],\r\n        });\r\n      }\r\n      return particles;\r\n    };\r\n\r\n    particlesRef.current = createParticles();\r\n\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n      particlesRef.current.forEach((particle) => {\r\n        particle.x += particle.vx;\r\n        particle.y += particle.vy;\r\n\r\n        if (particle.x < 0 || particle.x > canvas.width) particle.vx *= -1;\r\n        if (particle.y < 0 || particle.y > canvas.height) particle.vy *= -1;\r\n\r\n        ctx.beginPath();\r\n        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2);\r\n        ctx.fillStyle = particle.color;\r\n        ctx.fill();\r\n      });\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    const handleResize = () => {\r\n      canvas.width = canvas.offsetWidth;\r\n      canvas.height = canvas.offsetHeight;\r\n      particlesRef.current = createParticles();\r\n    };\r\n\r\n    handleResize();\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, [particleCount, particleColors]);\r\n\r\n  return (\r\n    <motion.button\r\n      className={`relative overflow-hidden rounded-lg px-4 py-2 font-medium text-sm uppercase tracking-wider transition-all duration-300 ease-in-out ${className}`}\r\n      style={{\r\n        background: 'rgba(255, 255, 255, 0.8)',\r\n        backdropFilter: 'blur(10px)',\r\n        border: '1px solid rgba(0, 0, 0, 0.1)',\r\n        boxShadow: '0 0 0 1px rgba(0, 0, 0, 0.05)',\r\n      }}\r\n      whileHover={{ scale: 1.05 }}\r\n      whileTap={{ scale: 0.95 }}\r\n    >\r\n      <canvas\r\n        ref={canvasRef}\r\n        className=\"absolute inset-0 w-full h-full\"\r\n        style={{ mixBlendMode: 'multiply' }}\r\n      />\r\n      <span className=\"relative z-10 text-black font-semibold\">\r\n        {children}\r\n      </span>\r\n    </motion.button>\r\n  );\r\n};\r\n\r\nexport default ParticleButton;"
    }
  ],
  "type": "components:ui"
}