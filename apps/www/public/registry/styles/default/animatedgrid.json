{
  "name": "animatedgrid",
  "dependencies": [
    "framer-motion"
  ],
  "files": [
    {
      "name": "animatedgrid.tsx",
      "content": "\"use client\"\r\n\r\nimport { useId, useState, useEffect } from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\nimport { motion, AnimatePresence } from \"framer-motion\"\r\n\r\ninterface GridPatternProps {\r\n  width?: number\r\n  height?: number\r\n  x?: number\r\n  y?: number\r\n  strokeWidth?: number\r\n  className?: string\r\n  [key: string]: any\r\n}\r\n\r\nexport function AnimatedGrid({\r\n  width = 40,\r\n  height = 40,\r\n  x = 0,\r\n  y = 0,\r\n  strokeWidth = 1,\r\n  className,\r\n  ...props\r\n}: GridPatternProps) {\r\n  const id = useId()\r\n  const [hoveredCell, setHoveredCell] = useState<{ row: number; col: number } | null>(null)\r\n  const [mousePosition, setMousePosition] = useState<{ x: number; y: number } | null>(null)\r\n\r\n  useEffect(() => {\r\n    const handleMouseMove = (event: MouseEvent) => {\r\n      setMousePosition({ x: event.clientX, y: event.clientY })\r\n    }\r\n\r\n    window.addEventListener(\"mousemove\", handleMouseMove)\r\n    return () => {\r\n      window.removeEventListener(\"mousemove\", handleMouseMove)\r\n    }\r\n  }, [])\r\n\r\n  const handleMouseMove = (event: React.MouseEvent<SVGSVGElement, MouseEvent>) => {\r\n    const svg = event.currentTarget\r\n    const rect = svg.getBoundingClientRect()\r\n    const mouseX = event.clientX - rect.left\r\n    const mouseY = event.clientY - rect.top\r\n\r\n    const col = Math.floor(mouseX / width)\r\n    const row = Math.floor(mouseY / height)\r\n\r\n    setHoveredCell({ row, col })\r\n  }\r\n\r\n  const handleMouseLeave = () => {\r\n    setHoveredCell(null)\r\n  }\r\n\r\n  return (\r\n    <svg\r\n      aria-hidden=\"true\"\r\n      className={cn(\r\n        \"pointer-events-auto fixed inset-0 h-screen w-full stroke-neutral-400/30\",\r\n        className\r\n      )}\r\n      {...props}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n    >\r\n      <defs>\r\n        <pattern\r\n          id={id}\r\n          width={width}\r\n          height={height}\r\n          patternUnits=\"userSpaceOnUse\"\r\n          patternContentUnits=\"userSpaceOnUse\"\r\n          x={x}\r\n          y={y}\r\n        >\r\n          <line x1=\"0\" y1=\"0\" x2={width} y2=\"0\" strokeWidth={strokeWidth} />\r\n          <line x1=\"0\" y1=\"0\" x2=\"0\" y2={height} strokeWidth={strokeWidth} />\r\n        </pattern>\r\n      </defs>\r\n      <rect width=\"100%\" height=\"100%\" strokeWidth={0} fill={`url(#${id})`} />\r\n      <AnimatePresence>\r\n        {hoveredCell && (\r\n          <motion.rect\r\n            key={`${hoveredCell.row}-${hoveredCell.col}`}\r\n            x={hoveredCell.col * width}\r\n            y={hoveredCell.row * height}\r\n            width={width}\r\n            height={height}\r\n            initial={{ opacity: 0, scale: 0.8 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            exit={{ opacity: 0, scale: 0.8 }}\r\n            transition={{ duration: 0.2 }}\r\n            fill=\"rgba(var(--color-primary-500), 0.3)\"\r\n          />\r\n        )}\r\n      </AnimatePresence>\r\n      {mousePosition && (\r\n        <motion.circle\r\n          cx={mousePosition.x}\r\n          cy={mousePosition.y}\r\n          r={width / 2}\r\n          fill=\"none\"\r\n          stroke=\"rgba(var(--color-primary-500), 0.5)\"\r\n          strokeWidth={2}\r\n          initial={{ scale: 0, opacity: 0 }}\r\n          animate={{ scale: 1, opacity: 1 }}\r\n          transition={{\r\n            type: \"spring\",\r\n            stiffness: 260,\r\n            damping: 20,\r\n          }}\r\n        />\r\n      )}\r\n      {mousePosition && (\r\n        <motion.circle\r\n          cx={mousePosition.x}\r\n          cy={mousePosition.y}\r\n          r={width / 4}\r\n          fill=\"rgba(var(--color-primary-500), 0.5)\"\r\n          initial={{ scale: 0, opacity: 0 }}\r\n          animate={{ scale: 1, opacity: 1 }}\r\n          transition={{\r\n            type: \"spring\",\r\n            stiffness: 260,\r\n            damping: 20,\r\n          }}\r\n        />\r\n      )}\r\n    </svg>\r\n  )\r\n}\r\n\r\nexport default AnimatedGrid"
    }
  ],
  "type": "components:ui"
}