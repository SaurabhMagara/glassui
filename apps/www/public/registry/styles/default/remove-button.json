{
  "name": "remove-button",
  "dependencies": [
    "shadcn"
  ],
  "files": [
    {
      "name": "remove-button.tsx",
      "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n  AlertDialogTrigger,\r\n} from \"@/components/ui/alert-dialog\"\r\nimport { X, Loader2, CheckCircle } from \"lucide-react\"\r\nimport { toast } from \"@/components/ui/use-toast\"\r\n\r\nexport default function RemoveButton() {\r\n  const [isShaking, setIsShaking] = useState(false)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [isRemoved, setIsRemoved] = useState(false)\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const handleShake = () => {\r\n    setIsShaking(true)\r\n    setTimeout(() => setIsShaking(false), 500)\r\n  }\r\n\r\n  const handleRemove = () => {\r\n    setIsLoading(true)\r\n    // Simulate API call\r\n    setTimeout(() => {\r\n      setIsLoading(false)\r\n      setIsRemoved(true)\r\n      toast({\r\n        title: \"Item Removed\",\r\n        description: \"The item has been successfully removed.\",\r\n        variant: \"default\",\r\n      })\r\n    }, 2000)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (isRemoved) {\r\n      const timer = setTimeout(() => setIsRemoved(false), 3000)\r\n      return () => clearTimeout(timer)\r\n    }\r\n  }, [isRemoved])\r\n\r\n  return (\r\n    <AlertDialog open={isOpen} onOpenChange={setIsOpen}>\r\n      <AlertDialogTrigger asChild>\r\n        <Button\r\n          variant=\"outline\"\r\n          className={`\r\n            group relative overflow-hidden bg-white text-destructive\r\n            border border-destructive hover:text-white\r\n            transition-all duration-300 ease-out\r\n            ${isShaking ? \"animate-shake\" : \"\"}\r\n            shadow-md hover:shadow-lg\r\n            rounded-full px-6 py-2\r\n          `}\r\n          onClick={handleShake}\r\n          disabled={isLoading || isRemoved}\r\n        >\r\n          <span className=\"relative z-10 flex items-center gap-2 font-semibold\">\r\n            {isLoading ? (\r\n              <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n            ) : isRemoved ? (\r\n              <CheckCircle className=\"h-4 w-4\" />\r\n            ) : (\r\n              <X className=\"h-4 w-4\" />\r\n            )}\r\n            {isLoading ? \"Removing...\" : isRemoved ? \"Removed\" : \"Remove\"}\r\n          </span>\r\n          <span className=\"absolute inset-0 z-0 bg-gradient-to-r from-red-500 to-pink-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300 ease-out transform group-hover:scale-105\" />\r\n        </Button>\r\n      </AlertDialogTrigger>\r\n      <AlertDialogContent>\r\n        <AlertDialogHeader>\r\n          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>\r\n          <AlertDialogDescription>\r\n            This action cannot be undone. This will permanently remove the item\r\n            from our servers.\r\n          </AlertDialogDescription>\r\n        </AlertDialogHeader>\r\n        <AlertDialogFooter>\r\n          <AlertDialogCancel>Cancel</AlertDialogCancel>\r\n          <AlertDialogAction\r\n            onClick={handleRemove}\r\n            className=\"bg-red-500 hover:bg-red-600 text-white transition-colors duration-200\"\r\n          >\r\n            Continue\r\n          </AlertDialogAction>\r\n        </AlertDialogFooter>\r\n      </AlertDialogContent>\r\n    </AlertDialog>\r\n  )\r\n}"
    }
  ],
  "type": "components:ui"
}